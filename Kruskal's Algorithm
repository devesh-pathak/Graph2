Kruskal's Algorithm
Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the Minimum Spanning Tree (MST) using Kruskal's algorithm.
For printing MST follow the steps -
1. In one line, print an edge which is part of MST in the format - 
v1 v2 w
where, v1 and v2 are the vertices of the edge which is included in MST and whose weight is w. And v1  <= v2 i.e. print the smaller vertex first while printing an edge.
2. Print V-1 edges in above format in different lines.
Note : Order of different edges doesn't matter.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
Print the MST, as described in the task.
Constraints :
2 <= V, E <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
1 2 1
0 1 3
0 3 5




import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

class Edge {
    int source;
    int destination;
    int weight;
}

class KruskalMST {
    Edge[] edges;
    int V, E;

    KruskalMST(int v, int e) {
        V = v;
        E = e;
        edges = new Edge[E];
        for (int i = 0; i < e; ++i) {
            edges[i] = new Edge();
        }
    }

    // Find operation for Union-Find algorithm
    int find(int[] parent, int i) {
        if (parent[i] == i) {
            return i;
        }
        return find(parent, parent[i]);
    }

    // Union operation for Union-Find algorithm
    void union(int[] parent, int x, int y) {
        int xRoot = find(parent, x);
        int yRoot = find(parent, y);
        parent[xRoot] = yRoot;
    }

    void kruskalMST() {
        Edge[] result = new Edge[V - 1];
        int[] parent = new int[V];

        for (int i = 0; i < V; ++i) {
            parent[i] = i;
        }

        // Sort edges in non-decreasing order by their weight
        Arrays.sort(edges, Comparator.comparingInt(o -> o.weight));

        int i = 0; // Index variable for the result[] array
        int e = 0; // Index variable for the edges[] array

        while (i < V - 1 && e < E) {
            Edge nextEdge = edges[e++];

            int x = find(parent, nextEdge.source);
            int y = find(parent, nextEdge.destination);

            // Add the edge to the result if it doesn't form a cycle
            if (x != y) {
                result[i++] = nextEdge;
                union(parent, x, y);
            }
        }

        // Print the MST
        for (i = 0; i < V - 1; ++i) {
            if (result[i].source <= result[i].destination) {
                System.out.println(result[i].source + " " + result[i].destination + " " + result[i].weight);
            } else {
                System.out.println(result[i].destination + " " + result[i].source + " " + result[i].weight);
            }
        }
    }
}

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int V = sc.nextInt();
        int E = sc.nextInt();

        KruskalMST graph = new KruskalMST(V, E);

        for (int i = 0; i < E; ++i) {
            graph.edges[i].source = sc.nextInt();
            graph.edges[i].destination = sc.nextInt();
            graph.edges[i].weight = sc.nextInt();
        }

        graph.kruskalMST();
    }
}

Code : Dijkstra's Algorithm
Send Feedback
Given an undirected, connected and weighted graph G(V, E) with V number of vertices (which are numbered from 0 to V-1) and E number of edges.
Find and print the shortest distance from the source vertex (i.e. Vertex 0) to all other vertices (including source vertex also) using Dijkstra's Algorithm.
Input Format :
Line 1: Two Integers V and E (separated by space)
Next E lines : Three integers ei, ej and wi, denoting that there exists an edge between vertex ei and vertex ej with weight wi (separated by space)
Output Format :
For each vertex, print its vertex number and its distance from source, in a separate line. The vertex number and its distance needs to be separated by a single space.
Note : Order of vertices in output doesn't matter.
Constraints :
2 <= V, E <= 10^5
Time Limit: 1 sec
Sample Input 1 :
4 4
0 1 3
0 3 5
1 2 1
2 3 8
Sample Output 1 :
0 0
1 3
2 4
3 5


// import java.util.Scanner;

// public class Solution {

// 	public static void main(String[] args) {
// 		Scanner s = new Scanner(System.in);
// 		int V = s.nextInt();
// 		int E = s.nextInt();

// 		/* Write Your Code Here
// 		 * Complete the Rest of the Program
// 		 * You have to take input and print the output yourself
// 		 */
// 	}
// }

import java.util.*;

public class Solution  {

    private static void dijkstra(int[][] graph, int V) {
        boolean[] visited = new boolean[V];
        int[] distance = new int[V];
        Arrays.fill(distance, Integer.MAX_VALUE);
        distance[0] = 0;

        for (int i = 0; i < V - 1; i++) {
            int minVertex = findMinVertex(distance, visited, V);
            visited[minVertex] = true;

            for (int j = 0; j < V; j++) {
                if (!visited[j] && graph[minVertex][j] != 0 && distance[minVertex] != Integer.MAX_VALUE) {
                    int newDistance = distance[minVertex] + graph[minVertex][j];
                    if (newDistance < distance[j]) {
                        distance[j] = newDistance;
                    }
                }
            }
        }

        // Print the shortest distances from source
        for (int i = 0; i < V; i++) {
            System.out.println(i + " " + distance[i]);
        }
    }

    private static int findMinVertex(int[] distance, boolean[] visited, int V) {
        int minVertex = -1;
        for (int i = 0; i < V; i++) {
            if (!visited[i] && (minVertex == -1 || distance[i] < distance[minVertex])) {
                minVertex = i;
            }
        }
        return minVertex;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int V = scanner.nextInt();
        int E = scanner.nextInt();

        int[][] graph = new int[V][V];
        for (int i = 0; i < E; i++) {
            int ei = scanner.nextInt();
            int ej = scanner.nextInt();
            int wi = scanner.nextInt();
            graph[ei][ej] = wi;
            graph[ej][ei] = wi;
        }

        dijkstra(graph, V);
    }
}
